plugins {
    id 'application'
}

mainClassName = "org.norc.rsub.App"

dependencies {
    compile 'info.picocli:picocli:4.2.0'
    annotationProcessor('info.picocli:picocli:4.2.0')
    compile 'org.fusesource.jansi:jansi:1.18'
    compile 'commons-io:commons-io:2.6'
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "rsub-cli",
                "Implementation-Version": project.version,
                "Main-Class": mainClassName
        )
    }
}

run {
    jvmArgs "-Djava.library.path=" + file("src/main/dist/natives").toPath()
    jvmArgs "-Dlog4j.configurationFile=" + file("src/test/resources/log4j2-test.xml").toPath()
    args "-sysin " + file("src/test/resources/test.sas").toPath()
    args "--config-class org.norc.rsub.ZeroConfigurator"
}

test {
    jvmArgs "-Djava.library.path=" + file("src/main/dist/natives").toPath()
}

def scriptJvmOpts = [
        "-Djava.library.path=TEMP_HOME/ext",
        "-Dlog4j.configurationFile=TEMP_HOME/conf/log4j2.xml",
        "-Dsasrsub.serverinfo=TEMP_HOME/conf/serverinfo.xml"
]

startScripts {
    defaultJvmOpts += scriptJvmOpts
    doLast {
        unixScript.text = unixScript.text.replace("TEMP_HOME", "\$APP_HOME")
        windowsScript.text = windowsScript.text.replace("TEMP_HOME", "%APP_HOME%")
    }
}

class PowershellStartScript extends org.gradle.jvm.application.tasks.CreateStartScripts {
    @Override
    File getUnixScript() {
        return new File(getOutputDir(), getApplicationName() + ".ps1")
    }
}

class NullStartScriptGenerator implements ScriptGenerator {
    @Override
    void generateScript(JavaAppStartScriptGenerationDetails details, Writer destination) {
        //ignored
    }
}

task powershellStartScript(type: PowershellStartScript) {
    outputDir = file('build/scripts')
    applicationName = project.name
    mainClassName = application.mainClassName
    classpath = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtimeClasspath
    defaultJvmOpts = scriptJvmOpts
    unixStartScriptGenerator.template = resources.text.fromFile("powershellTemplate.txt")
    windowsStartScriptGenerator = new NullStartScriptGenerator()
}

distZip.dependsOn powershellStartScript
